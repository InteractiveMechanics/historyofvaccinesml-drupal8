
{#
/**
 * @file
 * Default theme implementation to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
     Only "getter" methods (method names starting with "get", "has", or "is")
     and a few common methods such as "id" and "label" are available. Calling
     other methods (such as node.delete) will result in an exception.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 *
 * @ingroup themeable
 */
#}
		
{% verbatim %}
<script id="item-template" type="text/x-handlebars-template">
    <div style="width:220px; !important;">
		<div class="year">
			{{year}}
		</div>
		<div class="timeline-entry" data-caption="{{#each caption}}{{this}}|,|{{/each}}" data-creator="{{#each creator}}{{this}}|,|{{/each}}" id="{{id}}" data-datestr="{{datestr}}" data-year="{{year}}" data-uniqueid="{{id}}" data-title="{{title}}" data-body='{{description}}' 
			data-filename="{{#each filename}}{{this}}|,|{{/each}}" data-filetype="{{#each filetype}}{{this}}|,|{{/each}}" data-toggle="modal" data-target="#myModal">
				
				{{#isVideo filename.[0]}}{{/isVideo}}
			
			<div class="title">
				{{title}}
			</div>
			
			<br style="clear:both" />
		</div>
    </div>
</script>
{% endverbatim %}

<script type="text/javascript">
	var lang_id = "{{language.id}}";
</script>

<div id="visualization">
    <div id="visualization-timeline" class="">
        {% if language.direction == 'ltr' %}
            <a class="moveleft btn btn-default pull-left">&#9664;</a>
            <a class="moveright btn btn-default pull-right">&#9654;</a>
            <div class="slider"></div>
        {% elseif language.direction == 'rtl' %}
            <a class="moveleft btn btn-default pull-right">&#9654;</a>
            <a class="moveright btn btn-default pull-left">&#9664;</a>
            <div class="slider right-start"></div>
        {% endif %}
    </div>
</div>

<div class="main-content">
	<div class="row">
		<div class="col-md-8 timeline-overview">
			
			<div class="{% if language.direction == 'rtl' %} right {% endif %}">
				<h2>{{timeline_overview_title}}</h2>
				
				<p class="timeline-overview">
					{{timeline_overview_body|raw}}
				</p>
			</div>
		</div>
		
		<div class="col-md-4">
			<div class="sidebar timeline-sidebar">
				<div class="sidebar-item">
					<h5>
                        {% if language.id == 'ar' %}توضيحات{% endif %}
                        {% if language.id == 'ur' %}جھلکیاں{% endif %}
                        {% if language.id == 'hi' %}झलकियाँ {% endif %}
                    </h5>
				
					<ul>
						{% for key, highlight in timeline_overview_highlight if key|first != '#' %}
							
							<li>
								<div class="sidebar-blurb">
								
									<div class="{% if language.direction == 'rtl' %} right {% endif %}">
									
										<p class="title " style="color: #369; font-size: 13px; font-weight: bold;">
											<a href="javascript: void(0);" onclick="showTimelineItem({{highlight.field_related_timeline_entries.entity.field_uid.value}})">{{highlight.title.value}}</a>
											<br />
											
											
										</p>
										
										
										<p>
											{% if highlight.field_related_media[0].entity.field_orig_filename.value ends with "m4v" %}
					                            {% set orig_filename = highlight.field_related_media[0].entity.field_orig_filename.value|split('.')[0] %}
					                        {% else %}
					                            {% set orig_filename = highlight.field_related_media[0].entity.field_orig_filename.value %}
					                        {% endif %}
					                    
					                        {% if orig_filename|length == 1 %}
					                    		{% set orig_filename = '00000' ~ orig_filename %}
					                    
					                        {% elseif orig_filename|length == 2 %}
					                            {% set orig_filename = '0000' ~ orig_filename %}
					                    
					                        {% elseif orig_filename|length == 3 %}
					                            {% set orig_filename = '000' ~ orig_filename %}
					                    
					                        {% elseif orig_filename|length == 4 %}
					                            {% set orig_filename = '00' ~ orig_filename %}
					                    
					                        {% elseif orig_filename|length == 5 %}
					                            {% set orig_filename = '0' ~ orig_filename %}
					                    	{% endif %}
					                    	
											<img src="https://media.historyofvaccines.org/images/{{ orig_filename }}_265.jpg" width="70">
											{{highlight.body.value|raw}}
										</p>
										
										<br style="clear:both;" />
										
									</div>
								</div>
							</li>
						{% endfor %}					
					</ul>
				</div>
			</div>
		</div>	
	</div>

</div>

<script type="text/javascript">		

        
        function fixTitle(title) {
	        return title.replace("&#039;", "'");
        }
        
        function getURLParam(key,target){
	        var values = [];
	        if(!target){
	            target = location.href;
	        }
	
	        key = key.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
	
	        var pattern = key + '=([^&#]+)';
	        var o_reg = new RegExp(pattern,'ig');
	        while(true){
	            var matches = o_reg.exec(target);
	            if(matches && matches[1]){
	                values.push(matches[1]);
	            }
	            else{
	                break;
	            }
	        }
	
	        if(!values.length){
	             return null;   
	         }
	        else{
	           return values;
	        }
	
	    }


		Handlebars.registerHelper('isVideo', function(filename) {
            if (filename) {
    			var imgURL = "https://media.historyofvaccines.org/images/"+ filename + "_90.jpg"
    			if ( filename.indexOf('m4v') == -1 && filename != "") {
    				return "<div class='image'>" +
    							"<img src='"+ imgURL +"' />" +
    						"</div>"
    			} else {
    				return ""
    			}
			}
		});

        var timelineData = [];
        var timelineCount;
        var data = [];
        var slider;
        var timeline;

        var url = "";
        url = '/timeline_ml.php?language={{ language.id }}';
	   
        $.ajax({
            url: url,
            success: function(d) {
	            d = JSON.parse(d);
                var append = 0;
                var append_to = 0;

                for(i = 0; i < d.length; i++) {
        			append = 0;
        			for(x = 0; x < timelineData.length; x++) {
        				if(timelineData[x].title == d[i].title){
        					append = 1;
        					append_to = x;
        				}
        			}
        
        			if(append == 1) {
        				append = 0;
        				//timelineData[append_to].title.push(d[i].title);
        				timelineData[append_to].filename.push(d[i].filename);
                        timelineData[append_to].filetype.push(d[i].filetype);
                        timelineData[append_to].creator.push(d[i].field_creator);
                        timelineData[append_to].caption.push(d[i].field_caption);
                        timelineData[append_to].copyright.push(d[i].field_copyright);
        			} else {
                        if (d[i].year) {
	                        
	                        console.log(d[i].year);
	                        
	                        var dateStr = d[i].year;
	                        var year = '';
	                        if(dateStr.indexOf('/') == -1) {
		                        year = dateStr;
	                        } else {
		                        year = dateStr.split('/')[2];
	                        }
	                        
	                        if(year) {
		                        timelineData.push(
	            					{
	            						id: d[i].id,
	            						year: year,
	            						title: d[i].title,
	            						filename: [d[i].filename],
	                                    filetype: [d[i].filetype],
	                                    filetitle: [d[i].filetitle],
	                                    filebody: [d[i].filebody],
	                                    creator: [d[i].field_creator],
	                                    caption: [d[i].field_caption],
	                                    copyright: [d[i].field_copyright],
	            						category: d[i].category,
	            						description: d[i].description,
	            						datestr: d[i].year,
	            						start: year
	            					}
	            				);
            				}
                        }
        			}
        		}
        		
        		var sort_by = function(field, reverse, primer){

				   var key = primer ? 
				       function(x) {return primer(x[field])} : 
				       function(x) {return x[field]};
				
				   reverse = !reverse ? 1 : -1;
				
				   return function (a, b) {
				       return a = key(a), b = key(b), reverse * ((a > b) - (b > a));
				     } 
				}
				
				timelineData.sort(sort_by('year', false, parseInt));    
				
				// Create an array of all media items
                $.each(timelineData, function(i){
                    for (i = 0; i < this.filename.length; i++){
                        data[this.filename[i]] = {
                            root: this.filename[i],
                            title: this.title,
                            description: this.description,
                            caption: this.caption[i],
                            creator: this.creator[i]
                        };
                    }
                });            

        		//test
        		var source   = $("#item-template").html();
        		var template = Handlebars.compile(source);
        		var html    = template(timelineData[0]);
        		
        				
        		// create a handlebars template
        		//var source   = document.getElementById('item-template').innerHTML;
        		//var template = Handlebars.compile(document.getElementById('item-template').innerHTML);
        		
        		
        		
        		// DOM element where the Timeline will be attached
        		var container = document.getElementById('visualization');
        		
        		// Create a DataSet (allows two way data-binding)
        		var items = new vis.DataSet(timelineData);
        		
        		// Configuration for the Timeline
        		var options = {
        			template: template,
        			autoResize: true,
        			height: '600px',
                    showMinorLabels: true,
                    min: '800',
                    max: '2025',
                    start: '1200',
                    zoomMax: (473353890000),
                    zoomMin: (473353890000),
                    {% if language.direction == 'rtl' %}
                    rtl: true,
                    {% endif %}
                    timeAxis: {scale: 'year', step: 20}
        		};
        		
        		// Create a Timeline
        		timeline = new vis.Timeline(container, items, options);
                timelineCount = timelineData.length;
        		
        		setTimeout(function(){
	        		var eventLocationID = window.location.hash.substring(1);
        			
        			if(eventLocationID) {
        				eventLocationID = eventLocationID.replace("EVT_", "");
        				timeline.setSelection(eventLocationID, {focus: true});
        				
        				$("#" + eventLocationID).click();
        			} else {
                        eventLocationID = timelineData[0].id;
        				timeline.setSelection(eventLocationID, {focus: true});
                    }
	        	}, 300);
                slider = $('#visualization-timeline .slider').slider({
                    value: (Date.parse( timelineData[0].year ) - 365000000000),
                    min: (Date.parse( timelineData[0].year ) - 365000000000),
                    max: (Date.parse( timelineData[timelineCount-1].year )),
                    {% if language.direction == 'rtl' %}
                    isRTL: true,
                    {% endif %}
                    slide: function(e, ui) {
                        var newval = ui.value;
                        timeline.setWindow({
                            start: newval
                        });
                    }
                });
                $('.moveleft').on('click', function(){
                    var range = timeline.getWindow();
                    var interval = range.end - range.start;
        
                    {% if language.direction == 'ltr' %}
                    slider.slider('value', range.start.valueOf() - interval * 1.15);
                    {% else %}
                    slider.slider('value', range.start.valueOf() - interval * -1.15);
                    {% endif %}
        
                    timeline.setWindow({
                        start: range.start.valueOf() - interval * 1.15,
                        end:   range.end.valueOf()   - interval * 1.15
                    });
                });
        		$('.moveright').on('click', function(){
                    var range = timeline.getWindow();
                    var interval = range.end - range.start;
        
                    {% if language.direction == 'ltr' %}
                    slider.slider('value', range.start.valueOf() - interval * -1.15);
                    {% else %}
                    slider.slider('value', range.start.valueOf() - interval * 1.15);
                    {% endif %}
            
                    timeline.setWindow({
                        start: range.start.valueOf() - interval * -1.15,
                        end:   range.end.valueOf()   - interval * -1.15
                    });
                });
            },
            error: function (err) {
                console.log('Failed to load timeline data');
            }
        });
        
        function showTimelineItem(eventLocationID) {
			timeline.setSelection(eventLocationID, {focus: true});
			$("#" + eventLocationID).click();
        }
</script>

<!-- Modal -->
<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
  <div class="modal-dialog timeline-dialog" role="document">
    <div class="modal-content">
    
      <div class="modal-body">
      	
      	<div style="cursor:pointer;" class="pull-right" data-dismiss="modal">
      		<span class="glyphicon glyphicon-remove" style="z-index:10;"></span>
      	</div>
      	
      	<div class="row">
	        <div class="col-md-5 timeline-modal-left">
	        	<div class="timeline-modal-image text-center">
	        	
	        	</div>
			</div>
        
			<div class="col-md-7 timeline-modal-right">
				<p class="timeline-modal-date"></p>
				<p class="timeline-modal-title"></p>
				<p class="timeline-modal-body"></p>
			</div>
      </div>
     
      <!--<div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
      </div>-->
    </div>
  </div>
</div>


