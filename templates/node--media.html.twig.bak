{#
/**
 * @file
 * Default theme implementation to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
     Only "getter" methods (method names starting with "get", "has", or "is")
     and a few common methods such as "id" and "label" are available. Calling
     other methods (such as node.delete) will result in an exception.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 *
 * @ingroup themeable
 */
#}

<script>
    {% if node.field_orig_filename[0].value ends with "m4v" %}
        {% set orig_filename = node.field_orig_filename[0].value|split('.')[0] %}
    {% else %}
        {% set orig_filename = node.field_orig_filename[0].value %}
    {% endif %}

    {% if orig_filename|length == 1 %}
		{% set orig_filename = '00000' ~ orig_filename %}

    {% elseif orig_filename|length == 2 %}
        {% set orig_filename = '0000' ~ orig_filename %}

    {% elseif orig_filename|length == 3 %}
        {% set orig_filename = '000' ~ orig_filename %}

    {% elseif orig_filename|length == 4 %}
        {% set orig_filename = '00' ~ orig_filename %}

    {% elseif orig_filename|length == 5 %}
        {% set orig_filename = '0' ~ orig_filename %}
	{% endif %}

	
    
    var data = [];
    data["{{ orig_filename }}"] = {
        root: "{{ orig_filename }}",
        title: "{{ node.title.value }}",
        description: "{{ node.body[0].value|raw|striptags|replace({"\n":' ', "\r":' '}) }}",
        caption: "{{ node.field_caption[0].value|raw|striptags|replace({"\n":' ', "\r":' '}) }}"
    };
    
</script>

<div class="mobile-panel mobile-filter hidden-md hidden-lg" style="width:100%;">


	<div class="panel-group " id="accordion">
		<div class="panel panel-default">
            <div class="panel-heading">
                <h4 class="panel-title">
                	<a data-toggle="collapse" data-parent="#accordion" href="#filtersList">
                		FILTER MEDIA
						<span class="pull-right" style="font-size:10px;">[<span class="glyphicon glyphicon-plus" style="top:2px;"></span>]</span>
                	</a>
                </h4>
            </div>
            
            <div id="filtersList" class="panel-collapse collapse">
            	<div class="panel-body">
            		{{ exposed_form_gallery }}
            	</div>
            </div>
		</div>
        
    </div>

</div>
<div class="article-node gallery">
	<div class="row">
		<div class="col-md-3 hidden-sm hidden-xs">
			<div class="sidebar">
				<div class="sidebar-item">
					<h5>FILTER MEDIA</h5>
					
					<ul class="link-list gallery-form">
						{{ exposed_form_gallery }}
					</ul>
				</div>
			</div>
		</div>
	
		<div class="col-md-9">
			
			<div class="gallery-item">
                <a href="{{ base_path }}/gallery" class="back-to-results">&laquo; Back to results</a>
				<h1>{{ node.title.value }}</h1>

                {% if content.field_taxonomy.0['#url'].routeParameters['taxonomy_term'] != 37 %}
                    <div class="gallery-image-container">
                        <div 
                            class="show-modal" 
                            data-filename="{{ orig_filename }}"
                            >+</div>
                        <img src="https://media.historyofvaccines.org/images/{{ orig_filename }}_540.jpg" alt="{{ node.title[0].value }}" />
                    </div>
                {% elseif content.field_taxonomy.0['#url'].routeParameters['taxonomy_term'] == 37 %}
                    {% if orig_filename ends with '.m4v' %}
                        {% set ext = 'https://media.historyofvaccines.org/m4v/' %}
                        <video src="{{ ext }}{{ orig_filename }}" controls="controls" autoplay="true" width="100%"></video>
                    {% else %}
                        {% set ext = 'https://media.historyofvaccines.org/mobile/video/320/' %}
                        <video src="{{ ext }}{{ orig_filename }}.mp4" controls="controls" autoplay="true" width="100%"></video>
                    {% endif %}
                {% endif %}

                <dl class="dl-horizontal">
                    {% if node.field_caption[0].value %}
                        <dt>Caption:</dt>
                        <dd>{{ node.field_caption[0].value|raw }}</dd>
                    {% endif %}
                    {% if node.body[0].value %}
                        <dt>Description:</dt>
                        <dd>{{ node.body[0].value|raw }}</dd>
                    {% endif %}
                    {% if node.field_creator[0] %}
                        <dt>Creator:</dt>
                        {% for key, content in content.field_creator if key|first != '#' %}
                            <dd>{{ content['#node'].title.value|raw }}</dd>
                        {% endfor %}
                    {% endif %}
                    {% if node.field_copyright[0] %}
                        <dt>Copyright:</dt>
                        {% for key, content in content.field_copyright if key|first != '#' %}
                            <dd>{{ content['#node'].title.value|raw }}</dd>
                        {% endfor %}
                    {% endif %}
                    {% if node.field_timeline_categories[0] %}
                        <dt>Timeline Category:</dt>
                        {% for key, content in content.field_timeline_categories if key|first != '#' %}
                            <dd><a href="{{ content['#node'].uri }}">{{ content['#node'].title.value|raw }}</a></dd>
                        {% endfor %}
                    {% endif %}
                    {% if node.field_source[0].value %}
                        <dt>Source:</dt>
                        <dd>{{ node.field_source[0].value|raw }}</dd>
                    {% endif %}
                </dl>
			</div>
			
		</div>
	</div>
</div>


				